--- /content/drive/My Drive/gpn_data/yolov5/models/yolo.py
+++ /content/drive/My Drive/gpn_data/yolov5/models/yolo.py
@@ -1,9 +1,7 @@
 class Detect(nn.Module):
-    stride = None  # strides computed during build
-    export = False  # onnx export
-
-    def __init__(self, nc=80, anchors=(), ch=()):  # detection layer
+    def __init__(self, nc=80, anchors=()):  # detection layer
         super(Detect, self).__init__()
+        self.stride = None  # strides computed during build
         self.nc = nc  # number of classes
         self.no = nc + 5  # number of outputs per anchor
         self.nl = len(anchors)  # number of detection layers
@@ -12,23 +10,13 @@
         a = torch.tensor(anchors).float().view(self.nl, -1, 2)
         self.register_buffer('anchors', a)  # shape(nl,na,2)
         self.register_buffer('anchor_grid', a.clone().view(self.nl, 1, -1, 1, 1, 2))  # shape(nl,1,na,1,1,2)
-        self.m = nn.ModuleList(nn.Conv2d(x, self.no * self.na, 1) for x in ch)  # output conv
-        print(self.m)
+        self.export = False  # onnx export
 
     def forward(self, x):
         # x = x.copy()  # for profiling
         z = []  # inference output
         self.training |= self.export
-        # self._non_persistent_buffers_set = set()
-        # self.m = nn.ModuleList([
-        #     nn.Conv2d(320, 255, kernel_size=(1, 1), stride=(1, 1)),
-        #     nn.Conv2d(640, 255, kernel_size=(1, 1), stride=(1, 1)),
-        #     nn.Conv2d(1280, 255, kernel_size=(1, 1), stride=(1, 1)),
-        #     ]
-        # )
-        
         for i in range(self.nl):
-            x[i] = self.m[i](x[i])  # conv
             bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
             x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()
 